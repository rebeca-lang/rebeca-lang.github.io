/* Summarizes the mobility agenda of each commuter */
env int[numOfCommuter][] commuterAgendaMatrix;
/* Travel delays for each commuter's trip */
env int[numOfCommuter][] commuterTravelDelayMatrix;
/* Service Priority for each commuter */
env int[numOfCommuter][numOfService] commuterServicePriority;
/* Tangrhubs adjacency distance matrix */
env int[numOfTangrhub][numOfTangrhub] tangrhubDistanceMatrix;
/* Inter-hub trips velocities for each service */
env int[numOfTangrhub][numOfService] serviceAvgSpeed;

reactiveclass CommuterGenerator(numOfCommuter) {

	knownrebecs {
		 /* All the configured Tangrhub rebecs */
		 Tangrhub th_0;
		 ...
		 Tangrhub th_n; }

	CommuterGenerator() {
		1- init statevars...
		2- self.fireCommuters();	}


	/* Each commuter is delivered to the closest tangrhub */
  msgsrv fireCommuters() {
    foreach commuter in commuterMatrix :
    1) thArrTime: the arrival time to the closest tangrhub (i.e. th_o);
    2) serve commuters: th_o.serveCommuter(commuter,true) after(thArrTime); }

	/* Keep track of all those commuters who terminated their daily travels and encountered a service disruption */
 	msgsrv commuterEndOfTheDay(commuterID, isAborted) {
		/* In case all commuters terminated, each Tangrhub is resetted */
		if (all commuters came back home) :
		   foreach tangrhub_i in tangrhubs :
		      tangrhub_i.resetTangrhub(); }

}

reactiveclass Tangrhub(numOfCommuter) {
   knownrebecs {
      Tangrhub th_0;
      ...
      Tangrhub th_N;
      CommuterGenerator controller; }

   Tangrhub(...) {
      1) init statevars; }

   /* Each commuter asks for a mobility service for a trip */
   msgsrv serveCommuter( commuterId, isFirstTrip){
      if ( no mobility service available ) :
         controller.commuterEndOfTheDay(commuterId, true);
      else :
         1) select a service according to the current fleet available and the commuter service priority value;
         2) update the fleet of the selected mobility service;
         3) compute the travel statistics for the selected service (times, distances, costs and emissions);
         4) perform the travel by the selected mobility service:
            th_d.deliverCommuter(commuterId, selectedService, isFirstTrip) after (travTimes); }

   /* The commuter performs the travel from a Tangrhub to the next one */
   msgsrv deliverCommuter(String commuterId, int selectedService, boolean isFirstTrip){
       /* The fleet of the destination Tangrhub is updated */
       serviceFleet[selectedService]++;
       /* Check whether the current trip is the last one */
       if (isFirstTrip) :
          self.serveCommuter(commuterId, false) after(timeToReturnBack);
       else :
          controller.commuterEndOfTheDay(commuterId, false) after(homeArrivalTime);	}

   msgsrv resetTangrhub() { /* restore the initial configuration of this Tangrhub */ }
